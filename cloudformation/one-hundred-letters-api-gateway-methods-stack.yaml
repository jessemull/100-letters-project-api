AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  Environment:
    Type: String
    Default: "dev"
    Description: "The environment for the deployment (dev or prod)"
    AllowedValues:
      - dev
      - prod
    ConstraintDescription: "Must be either 'dev' or 'prod'."

Resources:
  CorrespondenceGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue:
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-correspondence-resource-${Environment}"
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-authorizer-${Environment}"
      RequestValidatorId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-validator-${Environment}"
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          !Sub 
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getCorrespondences-${Env}/invocations"
            - { Env: !Ref Environment }
      RequestParameters:
        "method.request.querystring.limit": false
        "method.request.querystring.lastEvaluatedKey": false
        "method.request.querystring.search": false
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "correspondence-response-model-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"
  
  CorrespondenceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue:
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId:
        Fn::ImportValue:
          !Sub "one-hundred-letters-api-correspondence-resource-${Environment}"
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: OPTIONS
        Type: MOCK
        RequestParameters: {}
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET, POST, PUT, DELETE, OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, Authorization, x-amz-date, x-api-key, g-recaptcha-response, G-Recaptcha-Response'"
            ResponseTemplates:
              application/json: "{}"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  CorrespondenceByIdOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue:
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId:
        Fn::ImportValue:
          !Sub "one-hundred-letters-api-correspondence-by-id-resource-${Environment}"
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: OPTIONS
        Type: MOCK
        RequestParameters: {}
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET, POST, PUT, DELETE, OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, Authorization, x-amz-date, x-api-key, g-recaptcha-response, G-Recaptcha-Response'"
            ResponseTemplates:
              application/json: "{}"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  CorrespondenceCreateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-correspondence-resource-${Environment}"
      AuthorizationType: CUSTOM
      AuthorizerId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-authorizer-${Environment}"
      HttpMethod: POST
      RequestValidatorId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-validator-${Environment}"
      RequestModels:
        "application/json":
          Fn::ImportValue: 
            !Sub "correspondence-create-request-model-${Environment}"
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          !Sub 
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:createCorrespondence-${Env}/invocations"
            - { Env: !Ref Environment }
      MethodResponses:
        - StatusCode: 201
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "correspondence-update-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"

  CorrespondenceByIdMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-correspondence-by-id-resource-${Environment}"
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-authorizer-${Environment}"
      RequestValidatorId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-validator-${Environment}"
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          !Sub 
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getCorrespondenceById-${Env}/invocations"
            - { Env: !Ref Environment }
      RequestParameters:
        method.request.path.id: true
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "correspondence-by-id-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 404
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "not-found-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"
  
  CorrespondenceUpdateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-correspondence-by-id-resource-${Environment}"
      AuthorizationType: CUSTOM
      AuthorizerId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-authorizer-${Environment}"
      HttpMethod: PUT
      RequestValidatorId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-validator-${Environment}"
      RequestModels:
        "application/json":
          Fn::ImportValue: 
            !Sub "correspondence-update-request-model-${Environment}"
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          !Sub 
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:updateCorrespondence-${Env}/invocations"
            - { Env: !Ref Environment }
      RequestParameters:
        method.request.path.id: true
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "correspondence-update-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 404
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "not-found-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"
  
  CorrespondenceDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-correspondence-by-id-resource-${Environment}"
      AuthorizationType: CUSTOM
      AuthorizerId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-authorizer-${Environment}"
      HttpMethod: DELETE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          !Sub 
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:deleteCorrespondence-${Env}/invocations"
            - { Env: !Ref Environment }
      RequestParameters:
        method.request.path.id: true
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "correspondence-delete-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 404
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "not-found-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"
  
  RecipientsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-recipients-resource-${Environment}"
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-authorizer-${Environment}"
      RequestValidatorId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-validator-${Environment}"
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          !Sub 
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getRecipients-${Env}/invocations"
            - { Env: !Ref Environment }
      RequestParameters:
        "method.request.querystring.limit": false
        "method.request.querystring.lastEvaluatedKey": false
        "method.request.querystring.search": false
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "recipient-response-model-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"
  
  RecipientOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue:
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId:
        Fn::ImportValue:
          !Sub "one-hundred-letters-api-recipients-resource-${Environment}"
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: OPTIONS
        Type: MOCK
        RequestParameters: {}
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET, POST, PUT, DELETE, OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, Authorization, x-amz-date, x-api-key, g-recaptcha-response, G-Recaptcha-Response'"
            ResponseTemplates:
              application/json: "{}"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  RecipientByIdOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue:
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId:
        Fn::ImportValue:
          !Sub "one-hundred-letters-api-recipient-by-id-resource-${Environment}"
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: OPTIONS
        Type: MOCK
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET, PUT, DELETE, OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, Authorization, x-amz-date, x-api-key, g-recaptcha-response, G-Recaptcha-Response'"
            ResponseTemplates:
              application/json: "{}"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  RecipientByIdMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-recipient-by-id-resource-${Environment}"
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-authorizer-${Environment}"
      RequestValidatorId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-validator-${Environment}"
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          !Sub 
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getRecipientById-${Env}/invocations"
            - { Env: !Ref Environment }
      RequestParameters:
        method.request.path.id: true
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "recipient-by-id-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 404
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "not-found-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"
  
  RecipientCreateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-recipients-resource-${Environment}"
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-authorizer-${Environment}"
      RequestValidatorId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-validator-${Environment}"
      RequestModels:
        "application/json":
          Fn::ImportValue: 
            !Sub "recipient-create-request-model-${Environment}"
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          !Sub 
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:createRecipient-${Env}/invocations"
            - { Env: !Ref Environment }
      MethodResponses:
        - StatusCode: 201
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "recipient-update-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"

  RecipientUpdateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-recipient-by-id-resource-${Environment}"
      HttpMethod: PUT
      AuthorizationType: CUSTOM
      AuthorizerId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-authorizer-${Environment}"
      RequestValidatorId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-validator-${Environment}"
      RequestModels:
        "application/json":
          Fn::ImportValue: 
            !Sub "recipient-update-request-model-${Environment}"
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          !Sub 
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:updateRecipient-${Env}/invocations"
            - { Env: !Ref Environment }
      RequestParameters:
        method.request.path.id: true
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue:
                !Sub "recipient-update-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 404
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "not-found-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"
  
  RecipientDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-recipient-by-id-resource-${Environment}"
      HttpMethod: DELETE
      AuthorizationType: CUSTOM
      AuthorizerId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-authorizer-${Environment}"
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          !Sub 
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:deleteRecipient-${Env}/invocations"
            - { Env: !Ref Environment }
      RequestParameters:
        method.request.path.id: true
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "recipient-delete-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 404
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "not-found-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"
  
  LettersGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue:
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId:
        Fn::ImportValue:
          !Sub "one-hundred-letters-api-letters-resource-${Environment}"
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-authorizer-${Environment}"
      RequestValidatorId:
        Fn::ImportValue:
          !Sub "one-hundred-letters-api-validator-${Environment}"
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          !Sub 
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getLetters-${Env}/invocations"
            - { Env: !Ref Environment }
      RequestParameters:
        "method.request.querystring.limit": false
        "method.request.querystring.lastEvaluatedKey": false
        "method.request.querystring.search": false
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "letter-response-model-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"

  LettersOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue:
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId:
        Fn::ImportValue:
          !Sub "one-hundred-letters-api-letters-resource-${Environment}"
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: OPTIONS
        Type: MOCK
        RequestParameters: {}
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET, POST, PUT, DELETE, OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, Authorization, x-amz-date, x-api-key, g-recaptcha-response, G-Recaptcha-Response'"
            ResponseTemplates:
              application/json: "{}"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
  
  LetterByIdOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue:
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId:
        Fn::ImportValue:
          !Sub "one-hundred-letters-api-letter-by-id-resource-${Environment}"
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: OPTIONS
        Type: MOCK
        RequestParameters: {}
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET, POST, PUT, DELETE, OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, Authorization, x-amz-date, x-api-key, g-recaptcha-response, G-Recaptcha-Response'"
            ResponseTemplates:
              application/json: "{}"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  LetterByIdMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-letter-by-id-resource-${Environment}"
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-authorizer-${Environment}"
      RequestValidatorId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-validator-${Environment}"
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          !Sub 
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getLetterById-${Env}/invocations"
            - { Env: !Ref Environment }
      RequestParameters:
        method.request.path.id: true
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "letter-by-id-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 404
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "not-found-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"

  LetterCreateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-letters-resource-${Environment}"
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-authorizer-${Environment}"
      RequestValidatorId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-validator-${Environment}"
      RequestModels:
        "application/json":
          Fn::ImportValue: 
            !Sub "letter-create-request-model-${Environment}"
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          !Sub 
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:createLetter-${Env}/invocations"
            - { Env: !Ref Environment }
      MethodResponses:
        - StatusCode: 201
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "letter-update-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"

  LetterUpdateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-letter-by-id-resource-${Environment}"
      HttpMethod: PUT
      AuthorizationType: CUSTOM
      AuthorizerId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-authorizer-${Environment}"
      RequestValidatorId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-validator-${Environment}"
      RequestModels:
        "application/json":
          Fn::ImportValue: 
            !Sub "letter-update-request-model-${Environment}"
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          !Sub 
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:updateLetter-${Env}/invocations"
            - { Env: !Ref Environment }
      RequestParameters:
        method.request.path.id: true
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "letter-update-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 404
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "not-found-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"

  LetterDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-letter-by-id-resource-${Environment}"
      HttpMethod: DELETE
      AuthorizationType: CUSTOM
      AuthorizerId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-authorizer-${Environment}"
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          !Sub 
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:deleteLetter-${Env}/invocations"
            - { Env: !Ref Environment }
      RequestParameters:
        method.request.path.id: true
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "letter-delete-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 404
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "not-found-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"

  SendContactEmailMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-contact-resource-${Environment}"
      HttpMethod: POST
      AuthorizationType: NONE
      RequestValidatorId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-validator-${Environment}"
      RequestParameters:
        method.request.header.G-Recaptcha-Response: false
        method.request.header.g-recaptcha-response: false
      RequestModels:
        "application/json":
          Fn::ImportValue: 
            !Sub "ses-send-email-model-${Environment}"
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          !Sub 
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:sendContactEmail-${Env}/invocations"
            - { Env: !Ref Environment }
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "ses-send-email-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"

  ContactOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue:
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId:
        Fn::ImportValue:
          !Sub "one-hundred-letters-api-contact-resource-${Environment}"
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: OPTIONS
        Type: MOCK
        RequestParameters: {}
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET, POST, PUT, DELETE, OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, Authorization, x-amz-date, x-api-key, g-recaptcha-response, G-Recaptcha-Response'"
            ResponseTemplates:
              application/json: "{}"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  UploadsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-uploads-resource-${Environment}"
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-authorizer-${Environment}"
      RequestValidatorId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-validator-${Environment}"
      RequestParameters:
        method.request.header.G-Recaptcha-Response: false
        method.request.header.g-recaptcha-response: false
      RequestModels:
        "application/json":
          Fn::ImportValue: 
            !Sub "uploads-model-${Environment}"
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          !Sub 
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:uploads-${Env}/invocations"
            - { Env: !Ref Environment }
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "uploads-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"

  DeleteUploadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-uploads-resource-${Environment}"
      HttpMethod: DELETE
      AuthorizationType: CUSTOM
      AuthorizerId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-authorizer-${Environment}"
      RequestParameters:
        method.request.querystring.fileKey: true
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          !Sub 
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:deleteUpload-${Env}/invocations"
            - { Env: !Ref Environment }
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "delete-upload-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"

  UploadsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue:
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId:
        Fn::ImportValue:
          !Sub "one-hundred-letters-api-uploads-resource-${Environment}"
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: OPTIONS
        Type: MOCK
        RequestParameters: {}
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET, POST, PUT, DELETE, OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, Authorization, x-amz-date, x-api-key, g-recaptcha-response, G-Recaptcha-Response'"
            ResponseTemplates:
              application/json: "{}"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

Conditions:
  IsDev: !Equals [ !Ref Environment, "dev" ]