AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  Environment:
    Type: String
    Default: "dev"
    Description: "The environment for the deployment (dev or prod)"
    AllowedValues:
      - dev
      - prod
    ConstraintDescription: "Must be either 'dev' or 'prod'."

Resources:
  CorrespondenceGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue:
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-correspondence-resource-${Environment}"
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getCorrespondences/invocations"
      RequestParameters:
        "method.request.querystring.limit": false
        "method.request.querystring.lastEvaluatedKey": false
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "correspondence-response-model-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"
  
  CorrespondenceCreateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-correspondence-resource-${Environment}"
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-authorizer-${Environment}"
      HttpMethod: POST
      RequestValidatorId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-validator-${Environment}"
      RequestModels:
        "application/json":
          Fn::ImportValue: 
            !Sub "correspondence-create-request-model-${Environment}"
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:createCorrespondence/invocations"
      MethodResponses:
        - StatusCode: 201
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "correspondence-update-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"
  CorrespondenceByIdMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-correspondence-by-id-resource-${Environment}"
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getCorrespondenceById/invocations"
      RequestParameters:
        method.request.path.id: true
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "correspondence-by-id-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 404
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "not-found-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"
  
  CorrespondenceUpdateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-correspondence-by-id-resource-${Environment}"
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-authorizer-${Environment}"
      HttpMethod: PUT
      RequestValidatorId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-validator-${Environment}"
      RequestModels:
        "application/json":
          Fn::ImportValue: 
            !Sub "correspondence-update-request-model-${Environment}"
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:updateCorrespondence/invocations"
      RequestParameters:
        method.request.path.id: true
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "correspondence-update-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 404
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "not-found-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"
  
  CorrespondenceDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-correspondence-by-id-resource-${Environment}"
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-authorizer-${Environment}"
      HttpMethod: DELETE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:deleteCorrespondence/invocations"
      RequestParameters:
        method.request.path.id: true
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "correspondence-delete-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 404
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "not-found-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"
  
  RecipientsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-recipients-resource-${Environment}"
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getRecipients/invocations"
      RequestParameters:
        "method.request.querystring.limit": false
        "method.request.querystring.lastEvaluatedKey": false
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "recipient-response-model-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"
  
  RecipientByIdMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-recipient-by-id-resource-${Environment}"
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getRecipientById/invocations"
      RequestParameters:
        method.request.path.id: true
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "recipient-by-id-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 404
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "not-found-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"
  
  RecipientCreateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-recipients-resource-${Environment}"
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-authorizer-${Environment}"
      RequestValidatorId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-validator-${Environment}"
      RequestModels:
        "application/json":
          Fn::ImportValue: 
            !Sub "recipient-create-request-model-${Environment}"
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:createRecipient/invocations"
      MethodResponses:
        - StatusCode: 201
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "recipient-update-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"

  RecipientUpdateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-recipient-by-id-resource-${Environment}"
      HttpMethod: PUT
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-authorizer-${Environment}"
      RequestValidatorId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-validator-${Environment}"
      RequestModels:
        "application/json":
          Fn::ImportValue: 
            !Sub "recipient-update-request-model-${Environment}"
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:updateRecipient/invocations"
      RequestParameters:
        method.request.path.id: true
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "recipient-update-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 404
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "not-found-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"
  
  RecipientDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-recipient-by-id-resource-${Environment}"
      HttpMethod: DELETE
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-authorizer-${Environment}"
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:deleteRecipient/invocations"
      RequestParameters:
        method.request.path.id: true
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "recipient-delete-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 404
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "not-found-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"
  
  LettersGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-letters-resource-${Environment}"
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getLetters/invocations"
      RequestParameters:
        "method.request.querystring.limit": false
        "method.request.querystring.lastEvaluatedKey": false
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "letter-response-model-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"
  
  LetterByIdMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-letter-by-id-resource-${Environment}"
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getLetterById/invocations"
      RequestParameters:
        method.request.path.id: true
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "letter-by-id-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 404
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "not-found-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"

  LetterCreateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-letters-resource-${Environment}"
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-authorizer-${Environment}"
      RequestValidatorId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-validator-${Environment}"
      RequestModels:
        "application/json":
          Fn::ImportValue: 
            !Sub "letter-create-request-model-${Environment}"
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:createLetter/invocations"
      MethodResponses:
        - StatusCode: 201
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "letter-update-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"

  LetterUpdateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-letter-by-id-resource-${Environment}"
      HttpMethod: PUT
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-authorizer-${Environment}"
      RequestValidatorId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-validator-${Environment}"
      RequestModels:
        "application/json":
          Fn::ImportValue: 
            !Sub "letter-update-request-model-${Environment}"
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:updateLetter/invocations"
      RequestParameters:
        method.request.path.id: true
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "letter-update-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 404
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "not-found-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"

  LetterDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-${Environment}"
      ResourceId: 
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-letter-by-id-resource-${Environment}"
      HttpMethod: DELETE
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Fn::ImportValue: 
          !Sub "one-hundred-letters-api-authorizer-${Environment}"
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:deleteLetter/invocations"
      RequestParameters:
        method.request.path.id: true
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "letter-delete-response-model-${Environment}"
        - StatusCode: 400
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "bad-request-error-${Environment}"
        - StatusCode: 404
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "not-found-error-${Environment}"
        - StatusCode: 500
          ResponseModels:
            "application/json":
              Fn::ImportValue: 
                !Sub "internal-server-error-${Environment}"
