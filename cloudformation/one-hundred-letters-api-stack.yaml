AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  VpcId:
    Type: String
    Description: VPC ID for API Gateway access restriction
  LocalIpRange:
    Type: String
    Description: CIDR block for local access
  S3WebsiteIpRange:
    Type: String
    Description: CIDR block for S3-hosted website access
  CognitoUserPoolName:
    Type: String
    Default: OneHundredLettersUserPool
  CognitoAppClientName:
    Type: String
    Default: OneHundredLettersAppClient
  LambdaS3BucketName:
    Type: String
    Description: Name of the existing S3 bucket for Lambda deployment packages

Resources:
  OneHundredLettersApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: OneHundredLettersApi
      Description: API for managing correspondence and recipients

  ApiGatewayResourcePolicy:
    Type: AWS::ApiGateway::RestApiPolicy
    Properties:
      RestApiId: !Ref OneHundredLettersApi
      Policy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "execute-api:Invoke"
            Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${OneHundredLettersApi}/*"
            Condition:
              StringEquals:
                aws:SourceVpc: !Ref VpcId
              IpAddress:
                aws:SourceIp:
                  - !Ref LocalIpRange
                  - !Ref S3WebsiteIpRange

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref CognitoUserPoolName
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Ref CognitoAppClientName
      UserPoolId: !Ref CognitoUserPool
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH

  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      Type: COGNITO_USER_POOLS
      RestApiId: !Ref OneHundredLettersApi
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !GetAtt CognitoUserPool.Arn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: OneHundredLettersLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - arn:aws:s3:::100-letters-project-api/*
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:YourLambdaFunctionName  # Replace with actual Lambda function name

  LambdaFunctions:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://${LambdaS3BucketName}.s3.amazonaws.com/lambda-functions.yaml"
      Parameters:
        RestApiId: !Ref OneHundredLettersApi

Outputs:
  LambdaS3Bucket:
    Description: "S3 bucket for Lambda deployment packages"
    Value: !Ref LambdaS3BucketName
