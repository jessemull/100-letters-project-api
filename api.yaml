openapi: "3.0.1"
info:
  title: "OneHundredLettersApi"
  description: "API for managing correspondence, recipients and letters."
  version: "2025-03-11T16:08:24Z"
servers:
  - url: https://api.onehundredletters.com
    description: Production API
  - url: https://api-dev.onehundredletters.com
    description: Development API
paths:
  /letter:
    get:
      summary: "Get All Letters"
      parameters:
        - $ref: "#/components/parameters/LimitParameter"
        - $ref: "#/components/parameters/LastEvaluatedKeyParameter"
      responses:
        200:
          description: "Get All Letters Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/LetterResponse"
                  lastEvaluatedKey:
                    $ref: "#/components/schemas/LastEvaluatedKey"
                  message:
                    type: "string"
                    example: "Letters fetched successfully!"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"             
    post:
      summary: "Create A Letter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LetterCreateRequest"
        required: true
      responses:
        201:
          description: "Create A Letter Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    $ref: "#/components/schemas/LetterResponse"
                  message:
                    type: "string"
                    example: "Letter created successfully!"
        404:
          description: "Not Found Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        400:
          description: "Bad Request Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - CognitoAuthorizer: []
  /letter/{id}:
    get:
      summary: "Get Letter By ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The ID of the letter to fetch."
          schema:
            type: "string"
            format: "uuid"
      responses:
        200:
          description: "Get Letter By ID Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    $ref: "#/components/schemas/LetterResponse"
                  message:
                    type: "string"
                    example: "Letter fetched successfully!"
        400:
          description: "Bad Request Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        404:
          description: "Not Found Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    put:
      summary: "Update Letter By ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The ID of the letter to update."
          schema:
            type: "string"
            format: "uuid"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LetterUpdateRequest"
        required: true
      responses:
        200:
          description: "Update Letter By ID Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    $ref: "#/components/schemas/LetterResponse"
                  message:
                    type: "string"
                    example: "Letter updated successfully!"
        400:
          description: "Bad Request Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        404:
          description: "Letter Not Found Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    delete:
      summary: "Delete Letter By ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The ID of the letter to delete."
          schema:
            type: "string"
            format: "uuid"
      responses:
        200:
          description: "Delete Letter By ID Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    type: "object"
                    properties:
                      letterId:
                        $ref: "#/components/schemas/UUID"
                  message:
                    type: "string"
                    example: "Letter deleted successfully!"
        400:
          description: "Bad Request Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        404:
          description: "Not Found Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /recipient:
    get:
      summary: "Get All Recipients"
      parameters:
        - $ref: "#/components/parameters/LimitParameter"
        - $ref: "#/components/parameters/LastEvaluatedKeyParameter"
      responses:
        200:
          description: "Get All Recipients Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/RecipientResponse"
                  lastEvaluatedKey:
                    $ref: "#/components/schemas/LastEvaluatedKey"
                  message:
                    type: "string"
                    example: "Recipients fetched successfully!"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"             
    post:
      summary: "Create A Recipient"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecipientCreateRequest"
        required: true
      responses:
        201:
          description: "Create A Recipient Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    $ref: "#/components/schemas/RecipientResponse"
                  message:
                    type: "string"
                    example: "Recipient created successfully!"
        400:
          description: "Bad Request Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - CognitoAuthorizer: []
  /recipient/{id}:
    get:
      summary: "Get Recipient By ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The ID of the recipient to fetch."
          schema:
            type: "string"
            format: "uuid"
      responses:
        200:
          description: "Get Recipient By ID Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    $ref: "#/components/schemas/RecipientResponse"
                  message:
                    type: "string"
                    example: "Recipient fetched successfully!"
        400:
          description: "Bad Request Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        404:
          description: "Not Found Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    put:
      summary: "Update Recipient By ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The ID of the recipient to update."
          schema:
            type: "string"
            format: "uuid"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecipientUpdateRequest"
        required: true
      responses:
        200:
          description: "Update Recipient By ID Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    $ref: "#/components/schemas/RecipientResponse"
                  message:
                    type: "string"
                    example: "Recipient updated successfully!"
        400:
          description: "Bad Request Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        404:
          description: "Recipient Not Found Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    delete:
      summary: "Delete Recipient By ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The ID of the recipient to delete."
          schema:
            type: "string"
            format: "uuid"
      responses:
        200:
          description: "Delete Recipient By ID Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    type: "object"
                    properties:
                      recipientId:
                        $ref: "#/components/schemas/UUID"
                  message:
                    type: "string"
                    example: "Recipient deleted successfully!"
        400:
          description: "Bad Request Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        404:
          description: "Not Found Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /correspondence:
    get:
      summary: "Get All Correspondences"
      parameters:
        - $ref: "#/components/parameters/LimitParameter"
        - $ref: "#/components/parameters/LastEvaluatedKeyParameter"
      responses:
        200:
          description: "Get All Correspondences Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/CorrespondenceResponse"
                  lastEvaluatedKey:
                    $ref: "#/components/schemas/LastEvaluatedKey"
                  message:
                    type: "string"
                    example: "Correspondences fetched successfully!"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"             
    post:
      summary: "Create A Correspondence"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CorrespondenceCreateRequest"
        required: true
      responses:
        201:
          description: "Create A Correspondence Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    $ref: "#/components/schemas/CorrespondenceResponse"
                  message:
                    type: "string"
                    example: "Correspondence created successfully!"
        400:
          description: "Bad Request Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - CognitoAuthorizer: []
  /correspondence/{id}:
    get:
      summary: "Get Correspondence By ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The ID of the correspondence to fetch."
          schema:
            type: "string"
            format: "uuid"
      responses:
        200:
          description: "Get Correspondence By ID Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    $ref: "#/components/schemas/CorrespondenceResponse"
                  message:
                    type: "string"
                    example: "Correspondence fetched successfully!"
        400:
          description: "Bad Request Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        404:
          description: "Not Found Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    put:
      summary: "Update Correspondence By ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The ID of the correspondence to update."
          schema:
            type: "string"
            format: "uuid"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CorrespondenceUpdateRequest"
        required: true
      responses:
        200:
          description: "Update Correspondence By ID Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    $ref: "#/components/schemas/CorrespondenceResponse"
                  message:
                    type: "string"
                    example: "Correspondence updated successfully!"
        400:
          description: "Bad Request Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        404:
          description: "Correspondence Not Found Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    delete:
      summary: "Delete Correspondence By ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The ID of the correspondence to delete."
          schema:
            type: "string"
            format: "uuid"
      responses:
        200:
          description: "Delete Correspondence By ID Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    type: "object"
                    properties:
                      correspondenceId:
                        $ref: '#/components/schemas/UUID'
                      recipientId:
                        $ref: '#/components/schemas/UUID'
                      letterIds:
                        type: array
                        items:
                          $ref: '#/components/schemas/UUID'
                  message:
                    type: "string"
                    example: "Correspondence deleted successfully!"
        400:
          description: "Bad Request Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        404:
          description: "Not Found Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /contact:
    post:
      summary: "Send Contact E-Mail"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendContactEmailRequest"
        required: true
      responses:
        200:
          description: "Send Contact E-Mail Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Email sent successfully."
        400:
          description: "Bad Request Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /uploads:
    post:
      summary: "Get Signed URL"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UploadsRequest"
        required: true
      responses:
        200:
          description: Get signed URL Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    $ref: "#/components/schemas/UploadsResponse"
                  message:
                    type: "string"
                    example: "Signed URL created successfully!"
        400:
          description: "Bad Request Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    delete:
      summary: "Delete Image"
      parameters:
        - name: fileKey
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/FileKey"
      responses:
        200:
          description: Delete Image Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Image deleted successfully!"
        400:
          description: "Bad Request Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
components:
  parameters:
    LimitParameter:
      name: "limit"
      in: "query"
      description: "The maximum number of letters to return"
      required: false
      schema:
        type: "integer"
        example: 50
    LastEvaluatedKeyParameter:
      name: "lastEvaluatedKey"
      in: "query"
      description: "The last evaluated key from the previous query for pagination"
      required: false
      schema:
        type: "string"
        example: "8f5d8f0d-8697-4124-a4c8-7d3af09fc102"
  schemas:
    Address:
      type: "object"
      properties:
        street:
          $ref: "#/components/schemas/Street"
        city:
          $ref: "#/components/schemas/City"
        state:
          $ref: "#/components/schemas/State"
        postalCode:
          $ref: "#/components/schemas/PostalCode"
        country:
          $ref: "#/components/schemas/Country"
      required:
        - street
        - city
        - state
        - postalCode
        - country
      example:
        street: "5623 Sunset Blvd"
        city: "Los Angeles"
        state: "CA"
        postalCode: "90047"
        country: "USA"
    City:
      type: "string"
      example: "Los Angeles"
    CorrespondenceStatus:
      type: "string"
      enum:
        - "COMPLETED"
        - "PENDING"
        - "RESPONDED"
        - "UNSENT"
      example: "PENDING"
    CorrespondenceTitle:
      type: "string"
      example: "George Church Letter"
    Country:
      type: "string"
      example: "USA"
    DateTime:
      type: "string"
      format: "date-time"
      example: "2025-03-07T14:30:00Z"
    Domain:
      type: "string"
      example: "Biology"
    Email:
      type: "string"
      format: "email"
      example: "fred.jackson@domain.com"
    FirstName:
      type: "string"
      example: "Alan"
    FileKey:
      type: "string"
      example: "unprocessed/filename.jpg"
    LetterImage:
      type: object
      required:
        - fileKey
        - id
        - url
        - urlThumbnail
        - view
      properties:
        id:
          type: string
          example: "abc123"
        caption:
          type: string
          example: "Front of the envelope"
        dateUploaded:
          type: string
          format: date-time
          example: "2025-04-29T15:00:00Z"
        fileKey:
          $ref: "#/components/schemas/FileKey"
        mimeType:
          $ref: '#/components/schemas/MimeType'
        sizeInBytes:
          type: integer
          example: 204800
        uploadedBy:
          type: string
          example: "user@domain.com"
        url:
          type: string
          format: uri
          example: "https://example.com/letter-image1.png"
        urlThumbnail:
          type: string
          format: uri
          example: "https://example.com/letter-image1.png"
        view:
          $ref: '#/components/schemas/View'
    ImageURLs:
      type: array
      items:
        $ref: '#/components/schemas/LetterImage'
      # example:
      #   - id: "img1"
      #     caption: "Letter front"
      #     dateUploaded: "2025-04-28T12:00:00Z"
      #     mimeType: "image/jpeg"
      #     sizeInBytes: 123456
      #     uploadedBy: "user123"
      #     url: "https://example.com/letter-image1.jpg"
      #     view: "LETTER_FRONT"
      #   - id: "img2"
      #     caption: "Envelope back"
      #     dateUploaded: "2025-04-28T12:05:00Z"
      #     mimeType: "image/png"
      #     sizeInBytes: 654321
      #     uploadedBy: "user123"
      #     url: "https://example.com/letter-image2.png"
      #     view: "ENVELOPE_BACK"
    Impact:
      type: "string"
      enum:
        - "LOW"
        - "MEDIUM"
        - "HIGH"
    LastEvaluatedKey:
      type: "string"
      description: "The last evaluated key to be used for pagination"
      example: "8f5d8f0d-8697-4124-a4c8-7d3af09fc102"
    LastName:
      type: "string"
      example: "Aldrich"
    LetterDescription:
      type: "string"
      example: "A heartfelt letter appreciating George Church's impact on high throughput DNA sequencing."
    LetterStatus:
      type: "string"
      enum:
        - "PENDING"
        - "SENT"
        - "RECEIVED"
        - "RESPONDED"
      example: "SENT"
    LetterTitle:
      type: "string"
      example: "George Church Letter"
    Message:
      type: "string"
      example: "I am contacting you to provide feedback..."
    Method:
      type: "string"
      enum:
        - "TYPED"
        - "HANDWRITTEN"
        - "PRINTED"
        - "DIGITAL"
        - "OTHER"
      example: "HANDWRITTEN"
    Name:
      type: "string"
      example: "Fred Jackson"
    Occupation:
      type: "string"
      example: "Architect"
    Organization:
      type: "string"
      example: "Sera Architects"
    PostalCode:
      type: "string"
      example: "90047"
    Reason:
      required:
        - 'description'
        - 'domain'
        - 'impact'
      type: "object"
      properties:
        description:
          $ref: "#/components/schemas/ReasonDescription"
        domain:
          $ref: "#/components/schemas/Domain"
        impact:
          $ref: "#/components/schemas/Impact"
    ReasonDescription:
      type: "string"
      example: "Contributions to high throughput sequencing and resurrecting wooly mammoths."
    RecipientDescription:
      type: "string"
      example: "George Church's contribution to the research community is invaluable."
    State:
      type: "string"
      example: "CA"
    Street:
      type: "string"
      example: "5623 Sunset Blvd"
    Text:
      type: "string"
      example: "Dear Dr. Church, I wanted to take a moment to express my deep appreciation..."
    Type:
      type: "string"
      enum:
        - "MAIL"
        - "EMAIL"
        - "SMS"
        - "OTHER"
      example: "MAIL"
    UUID:
      type: "string"
      format: "uuid"
      example: "52b249d0-7b41-4f58-bf49-d72d592f84ff"
    View:
      type: "string"
      enum:
        - "LETTER_FRONT"
        - "LETTER_BACK"
        - "ENVELOPE_FRONT"
        - "ENVELOPE_BACK"
        - "OTHER"
      example: "ENVELOPE_BACK"
    MimeType:
      type: "string"
      enum:
        - "image/jpeg"
        - "image/png"
        - "image/webp"
        - "image/gif"
      example: "image/gif"
    LetterBase:
      type: "object"
      properties:
        correspondenceId:
          $ref: "#/components/schemas/UUID"
        description:
          $ref: "#/components/schemas/LetterDescription"
        imageURLs:
          $ref: "#/components/schemas/ImageURLs"
        method:
          $ref: "#/components/schemas/Method"
        receivedAt:
          $ref: "#/components/schemas/DateTime"
        sentAt:
          $ref: "#/components/schemas/DateTime"
        status:
          $ref: "#/components/schemas/LetterStatus"
        text:
          $ref: "#/components/schemas/Text"
        title:
          $ref: "#/components/schemas/LetterTitle"
        type:
          $ref: "#/components/schemas/Type"
    LetterResponse:
      allOf:
        - $ref: "#/components/schemas/LetterBase"
        - type: "object"
          properties:
            letterId:
              $ref: "#/components/schemas/UUID"
            createdAt:
              $ref: "#/components/schemas/DateTime"
            updatedAt:
              $ref: "#/components/schemas/DateTime"
    LetterCreateRequest:
      allOf:
        - $ref: "#/components/schemas/LetterBase"
        - type: "object"
          required:
            - "correspondenceId"
            - "date"
            - "imageURLs"
            - "method"
            - "status"
            - "text"
            - "title"
            - "type"
    LetterUpdateRequest:
      allOf:
        - $ref: "#/components/schemas/LetterBase"
        - type: "object"
          required:
            - "correspondenceId"
            - "date"
            - "imageURLs"
            - "letterId"
            - "method"
            - "status"
            - "text"
            - "title"
            - "type"
          properties:
            letterId:
              $ref: "#/components/schemas/UUID"
    RecipientBase:
      type: "object"
      properties:
        address:
          $ref: "#/components/schemas/Address"
        firstName:
          $ref: "#/components/schemas/FirstName"
        lastName:
          $ref: "#/components/schemas/LastName"
        description:
          $ref: "#/components/schemas/RecipientDescription"
        occupation:
          $ref: "#/components/schemas/Occupation"
        organization:
          $ref: "#/components/schemas/Organization"
    RecipientResponse:
      allOf:
        - $ref: "#/components/schemas/RecipientBase"
        - type: "object"
          properties:
            recipientId:
              $ref: "#/components/schemas/UUID"
            createdAt:
              $ref: "#/components/schemas/DateTime"
            updatedAt:
              $ref: "#/components/schemas/DateTime"
    UploadsResponse:
      type: "object"
      properties:
        correspondenceId:
          $ref: "#/components/schemas/UUID"
        dateUploaded:
          type: string
          format: date-time
          example: "2025-04-29T15:00:00Z"
        fileKey:
          $ref: "#/components/schemas/FileKey"
        imageURL:
          type: "string"
          format: "uri"
          example: "https://onehundredletters.com/images/52b249d0-7b41-4f58-bf49-d72d592f84ff/42b249d0-7b41-4f58-bf49-d72d592f84ff/ENVELOPE_FRONT/67b249d0-7b41-4f58-bf49-d72d592f84ff.webp"
        letterId:
          $ref: "#/components/schemas/UUID"
        mimeType:
          $ref: "#/components/schemas/MimeType"
        signedUrl:
          type: "string"
          format: "uri"
          example: "https://your-bucket.s3.amazonaws.com/52b249d0-7b41-4f58-bf49-d72d592f84ff/ENVELOPE_FRONT/67b249d0.webp?X-Amz-Algorithm=AWS4-HMAC-SHA256..."
        thumbnailUrl:
          type: "string"
          format: "uri"
          example: "https://onehundredletters.com/images/52b249d0-7b41-4f58-bf49-d72d592f84ff/42b249d0-7b41-4f58-bf49-d72d592f84ff/ENVELOPE_FRONT/67b249d0-7b41-4f58-bf49-d72d592f84ff.webp"
        uploadedBy:
          type: string
          example: "user-dev"
        uuid:
          $ref: "#/components/schemas/UUID"
        view:
          $ref: "#/components/schemas/View"
      required:
        - correspondenceId
        - dateUploaded
        - fileKey
        - imageURL
        - letterId
        - mimeType
        - signedUrl
        - thumbnailUrl
        - uploadedBy
        - uuid
        - view
    RecipientCreateRequest:
      allOf:
        - $ref: "#/components/schemas/RecipientBase"
        - type: "object"
          required:
            - "address"
            - "firstName"
            - "lastName"
    RecipientUpdateRequest:
      allOf:
        - $ref: "#/components/schemas/RecipientBase"
        - type: "object"
          required:
            - "address"
            - "firstName"
            - "lastName"
            - "recipientId"
          properties:
            recipientId:
              $ref: "#/components/schemas/UUID"
    Correspondence:
      type: object
      properties:
        createdAt:
          $ref: "#/components/schemas/DateTime"
        correspondenceId:
          $ref: "#/components/schemas/UUID"
        recipientId:
          $ref: "#/components/schemas/UUID"
        reason:
          $ref: "#/components/schemas/Reason"
        status: 
          $ref: "#/components/schemas/CorrespondenceStatus"
        title: 
          $ref: "#/components/schemas/CorrespondenceTitle"
        updatedAt:
          $ref: "#/components/schemas/DateTime"
    CorrespondenceCreate:
      required:
        - "reason"
      type: object
      properties:
        reason:
          $ref: "#/components/schemas/Reason"
        status: 
          $ref: "#/components/schemas/CorrespondenceStatus"
        title: 
          $ref: "#/components/schemas/CorrespondenceTitle"
    CorrespondenceUpdate:
      required:
        - "correspondenceId"
        - "reason"
      type: object
      properties:
        correspondenceId:
          $ref: "#/components/schemas/UUID"
        reason:
          $ref: "#/components/schemas/Reason"
        status: 
          $ref: "#/components/schemas/CorrespondenceStatus"
        title: 
          $ref: "#/components/schemas/CorrespondenceTitle"
    CorrespondenceResponse:
      type: "object"
      properties:
        correspondence:
          $ref: "#/components/schemas/Correspondence"
        recipient:
          $ref: "#/components/schemas/RecipientResponse"
        letters:
          type: array
          items:
            $ref: "#/components/schemas/LetterResponse"
    CorrespondenceCreateRequest:
      required:
        - "correspondence"
        - "recipient"
        - "letters"
      type: "object"
      properties:
        correspondence:
          $ref: "#/components/schemas/CorrespondenceCreate"
        recipient:
          $ref: "#/components/schemas/RecipientCreateRequest"
        letters:
          type: array
          items:
            $ref: "#/components/schemas/LetterCreateRequest"
    CorrespondenceUpdateRequest:
      required:
        - "correspondence"
        - "recipient"
        - "letters"
      type: "object"
      properties:
        correspondence:
          $ref: "#/components/schemas/CorrespondenceUpdate"
        recipient:
          $ref: "#/components/schemas/RecipientUpdateRequest"
        letters:
          type: array
          items:
            $ref: "#/components/schemas/LetterUpdateRequest"
    SendContactEmailRequest:
      required:
        - "email"
        - "firstName"
        - "lastName"
        - "message"
      type: "object"
      properties:
        email:
          $ref: "#/components/schemas/Email"
        firstName:
          $ref: "#/components/schemas/FirstName"
        lastName:
          $ref: "#/components/schemas/LastName"
        message:
          $ref: "#/components/schemas/Message"
    UploadsRequest:
      required:
        - "correspondenceId"
        - "letterId"
        - "mimeType"
        - "view"
      type: "object"
      properties:
        correspondenceId:
          $ref: "#/components/schemas/UUID"
        letterId:
          $ref: "#/components/schemas/UUID"
        mimeType:
          $ref: "#/components/schemas/MimeType"
        view:
          $ref: "#/components/schemas/View"
    DeleteUploadRequest:
      required:
        - "correspondenceId"
        - "letterId"
        - "imageId"
        - "view"
      type: "object"
      properties:
        correspondenceId:
          $ref: "#/components/schemas/UUID"
        letterId:
          $ref: "#/components/schemas/UUID"
        imageId:
          $ref: "#/components/schemas/UUID"
        view:
          $ref: "#/components/schemas/View"
    BadRequestError:
      type: "object"
      properties:
        statusCode:
          type: "integer"
          example: 400
        message:
          type: "string"
          example: "Bad Request"
    InternalServerError:
      type: "object"
      properties:
        statusCode:
          type: "integer"
          example: 500
        message:
          type: "string"
          example: "Internal Server Error"
    NotFoundError:
      type: "object"
      properties:
        statusCode:
          type: "integer"
          example: 404
        message:
          type: "string"
          example: "Not Found"
  securitySchemes:
    CognitoAuthorizer:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "cognito_user_pools"
