openapi: "3.0.1"
info:
  title: "OneHundredLettersApi"
  description: "API for managing correspondence, recipients and letters."
  version: "2025-03-11T16:08:24Z"
servers:
  - url: "https://08ik48kqug.execute-api.us-west-2.amazonaws.com/{basePath}"
    variables:
      basePath:
        default: "prod"
paths:
  /letter:
    get:
      summary: "Get All Letters"
      responses:
        200:
          description: "Get All Letters Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/LetterResponse"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"             
    post:
      summary: "Create A Letter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LetterCreateRequest"
        required: true
      responses:
        201:
          description: "Create A Letter Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Letter created successfully!"
                  data:
                    $ref: "#/components/schemas/LetterResponse"
        400:
          description: "Bad Request Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - CognitoAuthorizer: []
  /letter/{id}:
    get:
      summary: "Get Letter By ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The ID of the letter to fetch."
          schema:
            type: "string"
            format: "uuid"
      responses:
        200:
          description: "Get Letter By ID Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    $ref: "#/components/schemas/LetterResponse"
        400:
          description: "Bad Request Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        404:
          description: "Not Found Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    put:
      summary: "Update Letter By ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The ID of the letter to update."
          schema:
            type: "string"
            format: "uuid"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LetterUpdateRequest"
        required: true
      responses:
        200:
          description: "Update Letter By ID Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Letter updated successfully!"
                  data:
                    $ref: "#/components/schemas/LetterResponse"
        400:
          description: "Bad Request Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        404:
          description: "Letter Not Found Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    delete:
      summary: "Delete Letter By ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The ID of the letter to delete."
          schema:
            type: "string"
            format: "uuid"
      responses:
        200:
          description: "Delete Letter By ID Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Letter deleted successfully!"
                  data:
                    type: "object"
                    properties:
                      letterId:
                        type: "string"
                        format: "uuid"
                        example: "53728a48-c780-480f-993f-5d8608b23caf"
        400:
          description: "Bad Request Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        404:
          description: "Not Found Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /recipient:
    get:
      summary: "Get All Recipients"
      responses:
        200:
          description: "Get All Recipients Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/RecipientResponse"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"             
    post:
      summary: "Create A Recipient"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecipientCreateRequest"
        required: true
      responses:
        201:
          description: "Create A Recipient Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Recipient created successfully!"
                  data:
                    $ref: "#/components/schemas/RecipientResponse"
        400:
          description: "Bad Request Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
      security:
        - CognitoAuthorizer: []
  /recipient/{id}:
    get:
      summary: "Get Recipient By ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The ID of the recipient to fetch."
          schema:
            type: "string"
            format: "uuid"
      responses:
        200:
          description: "Get Recipient By ID Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    $ref: "#/components/schemas/RecipientResponse"
        400:
          description: "Bad Request Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        404:
          description: "Not Found Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    put:
      summary: "Update Recipient By ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The ID of the recipient to update."
          schema:
            type: "string"
            format: "uuid"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecipientUpdateRequest"
        required: true
      responses:
        200:
          description: "Update Recipient By ID Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Recipient updated successfully!"
                  data:
                    $ref: "#/components/schemas/RecipientResponse"
        400:
          description: "Bad Request Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        404:
          description: "Recipient Not Found Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    delete:
      summary: "Delete Recipient By ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "The ID of the recipient to delete."
          schema:
            type: "string"
            format: "uuid"
      responses:
        200:
          description: "Delete Recipient By ID Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Recipient deleted successfully!"
                  data:
                    type: "object"
                    properties:
                      recipientId:
                        type: "string"
                        format: "uuid"
                        example: "53728a48-c780-480f-993f-5d8608b23caf"
        400:
          description: "Bad Request Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        404:
          description: "Not Found Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
components:
  schemas:
    Address:
      type: "string"
      example: "5623 Sunset Blvd, Los Angeles, CA 90047"
    DateTime:
      type: "string"
      format: "date-time"
      example: "2025-03-07T14:30:00Z"
    FirstName:
      type: "string"
      example: "Alan"
    ImageURL:
      type: "string"
      format: "uri"
      example: "https://example.com/letter-image.png"
    LastName:
      type: "string"
      example: "Aldrich"
    LetterDescription:
      type: "string"
      example: "A heartfelt letter appreciating George Church's impact on high throughput DNA sequencing."
    Method:
      type: "string"
      enum:
        - "TYPED"
        - "HANDWRITTEN"
        - "PRINTED"
        - "DIGITAL"
        - "OTHER"
      example: "HANDWRITTEN"
    Occupation:
      type: "string"
      example: "Architect"
    RecipientDescription:
      type: "string"
      example: "George Church's contribution to the research community is invaluable."
    Status:
      type: "string"
      enum:
        - "PENDING"
        - "SENT"
        - "RECEIVED"
        - "RESPONDED"
      example: "SENT"
    Text:
      type: "string"
      example: "Dear Dr. Church, I wanted to take a moment to express my deep appreciation..."
    Title:
      type: "string"
      example: "George Church Correspondence"
    Type:
      type: "string"
      enum:
        - "MAIL"
        - "EMAIL"
        - "SMS"
        - "OTHER"
      example: "MAIL"
    UUID:
      type: "string"
      format: "uuid"
      example: "52b249d0-7b41-4f58-bf49-d72d592f84ff"
    LetterResponse:
      type: "object"
      properties:
        correspondenceId:
          $ref: "#/components/schemas/UUID"
        createdAt:
          $ref: "#/components/schemas/DateTime"
        date:
          $ref: "#/components/schemas/DateTime"
        description:
          $ref: "#/components/schemas/LetterDescription"
        imageURL:
          $ref: "#/components/schemas/ImageURL"
        letterId:
          $ref: "#/components/schemas/UUID"
        method:
          $ref: "#/components/schemas/Method"
        status:
          $ref: "#/components/schemas/Status"
        text:
          $ref: "#/components/schemas/Text"
        title:
          $ref: "#/components/schemas/Title"
        type:
          $ref: "#/components/schemas/Type"
        updatedAt:
          $ref: "#/components/schemas/DateTime"
    LetterCreateRequest:
      required:
        - "correspondenceId"
        - "date"
        - "imageURL"
        - "method"
        - "status"
        - "text"
        - "title"
        - "type"
      type: "object"
      properties:
        correspondenceId:
          $ref: "#/components/schemas/UUID"
        date:
          $ref: "#/components/schemas/DateTime"
        description:
          $ref: "#/components/schemas/LetterDescription"
        imageURL:
          $ref: "#/components/schemas/ImageURL"
        method:
          $ref: "#/components/schemas/Method"
        status:
          $ref: "#/components/schemas/Status"
        text:
          $ref: "#/components/schemas/Text"
        title:
          $ref: "#/components/schemas/Title"
        type:
          $ref: "#/components/schemas/Type"
    LetterUpdateRequest:
      required:
        - "correspondenceId"
        - "date"
        - "imageURL"
        - "letterId"
        - "method"
        - "status"
        - "text"
        - "title"
        - "type"
      type: "object"
      properties:
        correspondenceId:
          $ref: "#/components/schemas/UUID"
        date:
          $ref: "#/components/schemas/DateTime"
        description:
          $ref: "#/components/schemas/LetterDescription"
        imageURL:
          $ref: "#/components/schemas/ImageURL"
        letterId:
          $ref: "#/components/schemas/UUID"
        method:
          $ref: "#/components/schemas/Method"
        status:
          $ref: "#/components/schemas/Status"
        text:
          $ref: "#/components/schemas/Text"
        title:
          $ref: "#/components/schemas/Title"
        type:
          $ref: "#/components/schemas/Type"
    RecipientResponse:
      type: "object"
      properties:
        address:
          $ref: "#/components/schemas/Address"
        createdAt:
          $ref: "#/components/schemas/DateTime"
        description:
          $ref: "#/components/schemas/RecipientDescription"
        firstName:
          $ref: "#/components/schemas/FirstName"
        lastName:
          $ref: "#/components/schemas/LastName"
        occupation:
          $ref: "#/components/schemas/Occupation"
        recipientId:
          $ref: "#/components/schemas/UUID"
        updatedAt:
          $ref: "#/components/schemas/DateTime"
    RecipientCreateRequest:
      required:
        - "address"
        - "firstName"
        - "lastName"
      type: "object"
      properties:
        address:
          $ref: "#/components/schemas/Address"
        firstName:
          $ref: "#/components/schemas/FirstName"
        lastName:
          $ref: "#/components/schemas/LastName"
        description:
          $ref: "#/components/schemas/RecipientDescription"
        occupation:
          $ref: "#/components/schemas/Occupation"
    RecipientUpdateRequest:
      required:
        - "address"
        - "firstName"
        - "lastName"
        - "recipientId"
      type: "object"
      properties:
        address:
          $ref: "#/components/schemas/Address"
        firstName:
          $ref: "#/components/schemas/FirstName"
        lastName:
          $ref: "#/components/schemas/LastName"
        description:
          $ref: "#/components/schemas/RecipientDescription"
        occupation:
          $ref: "#/components/schemas/Occupation"
        recipientId:
          $ref: "#/components/schemas/UUID"
    BadRequestError:
      type: "object"
      properties:
        statusCode:
          type: "integer"
          example: 400
        message:
          type: "string"
          example: "Bad Request"
    InternalServerError:
      type: "object"
      properties:
        statusCode:
          type: "integer"
          example: 500
        message:
          type: "string"
          example: "Internal Server Error"
    NotFoundError:
      type: "object"
      properties:
        statusCode:
          type: "integer"
          example: 404
        message:
          type: "string"
          example: "Not Found"
  securitySchemes:
    CognitoAuthorizer:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "cognito_user_pools"
