name: Deploy Lambda Automatically

on:
  push:
    branches:
      - main  # Or the branch you want to deploy from

jobs:
  deploy-lambdas:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-west-2
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          role-session-name: GithubLambdaDeployment
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-duration-seconds: 3600

      - name: Get PR merge commit information
        id: pr_info
        run: |
          # Fetch the PR's merge commit information
          merge_commit=$(git log -1 --merges --pretty=%H)
          echo "Merge commit: $merge_commit"
          
          # Get the parent commit of the merge commit (before it was merged into main)
          parent_commit=$(git rev-parse $merge_commit^1)
          echo "Parent commit: $parent_commit"
          
          # Set environment variables for later use
          echo "MERGE_COMMIT=$merge_commit" >> $GITHUB_ENV
          echo "PARENT_COMMIT=$parent_commit" >> $GITHUB_ENV

      - name: Check for file changes between merge commit and parent commit
        id: check_files
        run: |
          echo "=============== List modified files ==============="
          
          # Get the list of modified files between the merge commit and its parent
          git diff --name-only ${{ env.PARENT_COMMIT }} ${{ env.MERGE_COMMIT }} > files.txt
          echo "Modified files between merge commit and parent commit:"

          changed_functions=""

          # Loop through all modified files to check if they are under the Lambda function directories
          while IFS= read -r file
          do
            echo $file
            if [[ $file =~ ^routes/(createCorrespondence|getCorrespondences|getCorrespondencesById|getRecipientById|getRecipients|updateCorrespondence)/ ]]; then
              echo "Modified file is under the Lambda function folder: $file"
              FUNCTION_NAME=$(echo $file | cut -d'/' -f2)  # Extract the function name from the path
              changed_functions="$changed_functions $FUNCTION_NAME"
            fi
          done < files.txt

          if [ -z "$changed_functions" ]; then
            echo "No Lambda function changes detected. Skipping deployment."
            echo "::set-output name=run_job::false"
            exit 0  # Exit if no Lambda functions were modified
          else
            echo "Changed functions: $changed_functions"
            echo "::set-output name=run_job::true"

      - name: Build, package, and deploy Lambda functions
        run: |
          for FUNCTION_NAME in ${{ env.changed_functions }}; do
            echo "Processing Lambda function: $FUNCTION_NAME"
            
            # Check if Lambda function exists
            FUNCTION_EXISTS=$(aws lambda get-function --function-name "$FUNCTION_NAME" --query "Configuration.FunctionName" --output text)
            if [ "$FUNCTION_EXISTS" != "None" ]; then
              echo "Function $FUNCTION_NAME exists, ready for update."
            else
              echo "Function $FUNCTION_NAME not found, creating it..."
            fi

            # Build and package the Lambda function
            cd routes/$FUNCTION_NAME
            npm install
            npm run build
            npm run package
            cd ../../  # Go back to root directory

            # Upload Lambda package to S3
            aws s3 cp "routes/$FUNCTION_NAME/dist/$FUNCTION_NAME.zip" "s3://100-letters-project-api/$FUNCTION_NAME.zip"

            # Deploy or create Lambda function
            if [ "$FUNCTION_EXISTS" != "None" ]; then
              echo "Updating Lambda function: $FUNCTION_NAME"
              aws lambda update-function-code --function-name "$FUNCTION_NAME" --s3-bucket 100-letters-project-api --s3-key "$FUNCTION_NAME.zip"
            else
              echo "Creating Lambda function: $FUNCTION_NAME"
              aws lambda create-function --function-name "$FUNCTION_NAME" \
                --runtime nodejs20.x \
                --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole \
                --handler index.handler \
                --code S3Bucket=100-letters-project-api,S3Key=$FUNCTION_NAME.zip \
                --region us-west-2
            fi
          done
