name: Deploy Lambda Manually

on:
  workflow_dispatch:
    inputs:
      lambda_function:
        description: "Lambda function name"
        required: true
        type: choice
        options:
          - createCorrespondence
          - deleteCorrespondence
          - getCorrespondences
          - getCorrespondencesById
          - getRecipientById
          - getRecipients
          - updateCorrespondence

jobs:
  deploy-lambda:
    name: Deploy Lambda Manually - ${{ github.event.inputs.lambda_function }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Build Lambda Package
        run: |
          FUNCTION_NAME="${{ github.event.inputs.lambda_function }}"
          cd routes/$FUNCTION_NAME
          npm install
          npm run build
          npm run package
          cd ../../  # Go back to root directory

      - name: Generate Artifact & Change Set Names
        run: |
          FUNCTION_NAME="${{ github.event.inputs.lambda_function }}"
          COMMIT_HASH=$(git rev-parse --short HEAD)
          VERSION=$(jq -r .version < routes/${FUNCTION_NAME}/package.json)
          TIMESTAMP=$(date -u +"%Y%m%dT%H%M%SZ")
          ARTIFACT_NAME="${FUNCTION_NAME}-${VERSION}-${COMMIT_HASH}-${TIMESTAMP}.zip"
          CHANGE_SET_NAME="one-hundred-letters-${FUNCTION_NAME}-change-set-${TIMESTAMP}"
          echo "Artifact: $ARTIFACT_NAME"
          echo "Set: $CHANGE_SET_NAME"
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          echo "CHANGE_SET_NAME=$CHANGE_SET_NAME" >> $GITHUB_ENV
          
      - name: Upload Lambda to S3
        run: |
          FUNCTION_NAME="${{ github.event.inputs.lambda_function }}"
          S3_BUCKET="100-letters-project-api"
          S3_KEY="${FUNCTION_NAME}.zip"
          aws s3 cp "routes/${FUNCTION_NAME}/dist/${FUNCTION_NAME}.zip" s3://${S3_BUCKET}/${FUNCTION_NAME}/${ARTIFACT_NAME} --region us-west-2

      - name: Check Change Set Update/Create 
        id: change_set_type
        run: |
          STACK_NAME="one-hundred-letters-route-${{ github.event.inputs.lambda_function }}-stack"
          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region us-west-2 >/dev/null 2>&1; then
            echo "Updating change set..."
            echo "change_set_type=UPDATE" >> $GITHUB_ENV
          else
            echo "Creating change set..."
            echo "change_set_type=CREATE" >> $GITHUB_ENV
          fi

      - name: Check Stack Status
        id: stack_status
        if: env.change_set_type == 'UPDATE'
        run: |
          STACK_NAME="one-hundred-letters-route-${{ github.event.inputs.lambda_function }}-stack"
          STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "NOT_FOUND")
          echo "Status: $STATUS"
          FAILED_STATES=("CREATE_FAILED" "ROLLBACK_FAILED" "UPDATE_FAILED" "DELETE_FAILED" "UPDATE_ROLLBACK_FAILED" "UPDATE_ROLLBACK_COMPLETE" "ROLLBACK_COMPLETE")
          if [[ " ${FAILED_STATES[@]} " =~ " ${STATUS} " ]]; then
            echo "Deleting stack due to status..."
            aws cloudformation delete-stack --stack-name "$STACK_NAME" --region us-west-2
            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name "$STACK_NAME" --region us-west-2
            echo "Stack deleted successfully!"
            echo "change_set_type=CREATE" >> $GITHUB_ENV
          fi

      - name: Create CloudFormation Change Set
        run: |
          FUNCTION_NAME="${{ github.event.inputs.lambda_function }}"
          STACK_NAME="one-hundred-letters-route-${{ github.event.inputs.lambda_function }}-stack"
          TEMPLATE_FILE="routes/${{ github.event.inputs.lambda_function }}/template.yaml"
          aws cloudformation create-change-set \
            --stack-name $STACK_NAME \
            --template-body file://$TEMPLATE_FILE \
            --parameters ParameterKey=S3Key,ParameterValue=${FUNCTION_NAME}/${ARTIFACT_NAME} \
            --change-set-name ${{ env.CHANGE_SET_NAME }} \
            --change-set-type ${{ env.change_set_type }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --region us-west-2
          echo "Waiting for change set to be created..."
          aws cloudformation wait change-set-create-complete \
            --stack-name $STACK_NAME \
            --change-set-name ${{ env.CHANGE_SET_NAME }} \
            --region us-west-2

      - name: Check for Applied Changes
        run: |
          STACK_NAME="one-hundred-letters-route-${{ github.event.inputs.lambda_function }}-stack"
          CHANGES=$(aws cloudformation describe-change-set \
                    --stack-name $STACK_NAME \
                    --change-set-name ${{ env.CHANGE_SET_NAME }} \
                    --query "Changes" \
                    --region us-west-2)
          if [ "$(echo "$CHANGES" | jq length)" -eq 0 ]; then
            echo "No changes in the change set, skipping execution."
            echo "no_changes=true" >> $GITHUB_ENV
          else
            echo "Changes detected, proceeding with execution."
            echo "no_changes=false" >> $GITHUB_ENV
          fi

      - name: Execute CloudFormation Change Set
        if: env.no_changes == 'false'
        run: |
          STACK_NAME="one-hundred-letters-route-${{ github.event.inputs.lambda_function }}-stack"
          aws cloudformation execute-change-set \
            --stack-name $STACK_NAME \
            --change-set-name ${{ env.CHANGE_SET_NAME }} \
            --region us-west-2

      - name: Monitor CloudFormation Stack Status
        if: env.no_changes == 'false'
        run: |
          DONE_STATUSES=("CREATE_COMPLETE" "UPDATE_COMPLETE" "ROLLBACK_COMPLETE" "UPDATE_ROLLBACK_COMPLETE" "DELETE_COMPLETE")
          FAILED_STATUSES=("CREATE_FAILED" "UPDATE_FAILED" "ROLLBACK_FAILED" "DELETE_FAILED" "UPDATE_ROLLBACK_FAILED" "ROLLBACK_IN_PROGRESS" "DELETE_IN_PROGRESS")
          STACK_NAME="one-hundred-letters-route-${{ github.event.inputs.lambda_function }}-stack"
          MAX_RETRIES=30
          RETRY_COUNT=0
          while true; do
            STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region us-west-2 --query "Stacks[0].StackStatus" --output text)
            echo "Status: $STATUS"
            if [[ " ${DONE_STATUSES[@]} " =~ " ${STATUS} " ]]; then
              echo "Stack update completed successfully!"
              echo "Status: $STATUS"
              break
            # Check if the status is one of the 'failed' statuses
            elif [[ " ${FAILED_STATUSES[@]} " =~ " ${STATUS} " ]]; then
              echo "Stack failed to update!"
              echo "Status: $STATUS"
              aws cloudformation describe-stack-events --stack-name $STACK_NAME --region us-west-2 --query "StackEvents[?ResourceStatus=='$STATUS'].[LogicalResourceId, ResourceStatus, ResourceStatusReason]" --output table
              exit 1
            fi
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [[ $RETRY_COUNT -ge $MAX_RETRIES ]]; then
              echo "Max retries reached, exiting."
              exit 1
            fi
            echo "Checking status..."
            sleep 10
          done

