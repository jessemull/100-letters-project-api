name: Deploy Lambda Manually

on:
  workflow_dispatch:
    inputs:
      lambda_function:
        description: "Lambda function name"
        required: true
        type: choice
        options:
          - createCorrespondence
          - deleteCorrespondence
          - getCorrespondences
          - getCorrespondencesById
          - getRecipientById
          - getRecipients
          - updateCorrespondence

jobs:
  deploy-lambda:
    name: Deploy Lambda Manually
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Build Lambda Package
        run: |
          FUNCTION_NAME="${{ github.event.inputs.lambda_function }}"
          cd routes/$FUNCTION_NAME
          npm install
          npm run build
          npm run package
          cd ../../  # Go back to root directory

      - name: Upload Lambda to S3
        run: |
          FUNCTION_NAME="${{ github.event.inputs.lambda_function }}"
          S3_BUCKET="100-letters-project-api"
          S3_KEY="${FUNCTION_NAME}.zip"
          aws s3 cp "routes/${FUNCTION_NAME}/dist/${FUNCTION_NAME}.zip" s3://${S3_BUCKET}/${S3_KEY} --region us-west-2

      - name: Check Change Set Update/Create 
        id: change_set_type
        run: |
          STACK_NAME="one-hundred-letters-route-${{ github.event.inputs.lambda_function }}-stack"
          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region us-west-2 >/dev/null 2>&1; then
            echo "Change Set - Update"
            echo "change_set_type=UPDATE" >> $GITHUB_ENV
          else
            echo "Change Set - Create"
            echo "change_set_type=CREATE" >> $GITHUB_ENV
          fi

      - name: Create CloudFormation Change Set
        run: |
          STACK_NAME="one-hundred-letters-route-${{ github.event.inputs.lambda_function }}-stack"
          TEMPLATE_FILE="routes/${{ github.event.inputs.lambda_function }}/template.yaml"
          CHANGE_SET_NAME="one-hundred-letters-route-${{ github.event.inputs.lambda_function }}-change-set"

          aws cloudformation create-change-set \
            --stack-name $STACK_NAME \
            --template-body file://$TEMPLATE_FILE \
            --change-set-name $CHANGE_SET_NAME \
            --change-set-type ${{ env.change_set_type }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --region us-west-2

          echo ""
          echo "Waiting for change set to be created..."

          aws cloudformation wait change-set-create-complete \
            --stack-name $STACK_NAME \
            --change-set-name $CHANGE_SET_NAME \
            --region us-west-2

      - name: Execute CloudFormation Change Set
        run: |
          STACK_NAME="one-hundred-letters-route-${{ github.event.inputs.lambda_function }}-stack"
          CHANGE_SET_NAME="one-hundred-letters-route-${{ github.event.inputs.lambda_function }}-change-set"
          
          # Execute the change set
          aws cloudformation execute-change-set \
            --stack-name $STACK_NAME \
            --change-set-name $CHANGE_SET_NAME \
            --region us-west-2

      - name: Monitor CloudFormation Stack Status
        run: |
          STACK_NAME="one-hundred-letters-route-${{ github.event.inputs.lambda_function }}-stack"

          echo "Monitoring CloudFormation stack status..."
          while true; do
            STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region us-west-2 --query "Stacks[0].StackStatus" --output text)
            echo "Current stack status: $STATUS"

            if [[ "$STATUS" == "ROLLBACK_COMPLETE" ]]; then
              echo "üö® CloudFormation stack rollback detected! Fetching failure reasons..."
              aws cloudformation describe-stack-events --stack-name $STACK_NAME --region us-west-2 --query "StackEvents[?ResourceStatus=='ROLLBACK_FAILED' || ResourceStatus=='ROLLBACK_IN_PROGRESS' || ResourceStatus=='DELETE_FAILED'].[LogicalResourceId, ResourceStatus, ResourceStatusReason]" --output table
              exit 1
            elif [[ "$STATUS" == "CREATE_COMPLETE" || "$STATUS" == "UPDATE_COMPLETE" ]]; then
              echo "‚úÖ CloudFormation stack update successful!"
              break
            elif [[ "$STATUS" == "UPDATE_FAILED" || "$STATUS" == "CREATE_FAILED" ]]; then
              echo "‚ö†Ô∏è CloudFormation stack failed! Fetching failure reasons..."
              aws cloudformation describe-stack-events --stack-name $STACK_NAME --region us-west-2 --query "StackEvents[?ResourceStatus=='CREATE_FAILED' || ResourceStatus=='UPDATE_FAILED'].[LogicalResourceId, ResourceStatus, ResourceStatusReason]" --output table
              exit 1
            else
              echo "‚è≥ Still waiting... (next check in 10 seconds)"
              sleep 10
            fi
          done

