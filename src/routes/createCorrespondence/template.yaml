AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  Environment:
    Type: String
    Description: "The environment for the deployment (dev or prod)"
    AllowedValues:
      - dev
      - prod
    ConstraintDescription: "Must be either 'dev' or 'prod'."
  S3Key:
    Type: String
    Description: The S3 key for the lambda function zip file.

Resources:
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: createCorrespondence
      Runtime: nodejs20.x
      Role: !ImportValue OneHundredLettersLambdaExecutionRoleArn
      Handler: routes/createCorrespondence/index.handler
      Code:
        S3Bucket: !ImportValue LambdaS3BucketName
        S3Key: !Ref S3Key
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          CORRESPONDENCE_TABLE_NAME: !Sub "{{resolve:secretsmanager:one-hundred-letters-correspondence-table-name-${Environment}}}"
          ENVIRONMENT: !Ref Environment
          LETTER_TABLE_NAME: !Sub "{{resolve:secretsmanager:one-hundred-letters-letter-table-name-${Environment}}}"
          RECIPIENT_TABLE_NAME: !Sub "{{resolve:secretsmanager:one-hundred-letters-recipient-table-name-${Environment}}}"

  LambdaInvokePermissionGetRecipientById:
    Type: AWS::Lambda::Permission
    DependsOn: MyLambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:createCorrespondence"
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/POST/*"
